
/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */


/* THIS FILE WAS GENERATED!
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/mouse.h>

/ {
    behaviors {
        td_f: tap_dance_f {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_F";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp F>, <&sl 4>, <&kp F>;
        };

        td_k: tap_dance_k {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_K";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp K>, <&sk LALT>, <&kp K>;
        };

        td_q: tap_dance_q {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_Q";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp Q>, <&to 5>, <&kp Q>;
        };
    };
    
    keymap {
        compatible = "zmk,keymap";


        default_layer {
            bindings = <
          &td_q   &kp W   &td_f           &kp P                   &kp B               &kp J              &kp L            &kp U            &kp Y    &mt LGUI(BACKSPACE) BACKSPACE
          &kp A   &kp R   &mt LEFT_ALT S  &mt LEFT_GUI T          &kp G               &kp M              &mt RIGHT_GUI N  &mt RIGHT_ALT E  &kp I    &kp O
          &kp X   &kp C   &kp D           &kp V                   &kp Z               &td_k              &kp H            &kp COMMA        &kp DOT  &to 2
                                          &mt LA(LC(LSHFT)) SPACE &sk LEFT_SHIFT      &sk RIGHT_CONTROL  &sl 1
            >;
        };

        layer_One_Shot {
            bindings = <
           &kp ESC   &kp AT          &kp HASH          &kp PRINTSCREEN    &kp PERCENT          &kp CARET         &kp AMPERSAND         &kp KP_MULTIPLY        &kp SEMICOLON     &kp COLON
           &kp TAB   &kp EQUAL       &kp SINGLE_QUOTE  &kp DOUBLE_QUOTES  &trans               &kp               &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp               &kp ENTER
           &kp TILDE &kp DOLLAR      &kp UNDERSCORE    &trans             &to 4                &kp LEFT_BRACKET  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp RIGHT_BRACKET &to 3
                                                       &to 0              &sk LEFT_SHIFT       &sk RIGHT_ALT     &to 2
            >;
        };

        layer_NUM_CTRL {
            bindings = <
         &kp ESC  &kp C_PLAY_PAUSE &kp C_PREV     &kp C_NEXT     &kp UNDERSCORE          &mt LGUI(MINUS) MINUS   &mt LGUI(N7) N7  &mt LGUI(N8) N8  &mt LGUI(N9) N9     &trans
         &kp TAB  &trans           &kp C_VOL_DN   &kp C_VOL_UP   &kp PLUS                &mt LGUI(EQUAL) EQUAL   &mt LGUI(N4) N4  &mt LGUI(N5) N5  &mt LGUI(N6) N6     &kp ENTER
         &to 4    &kp KP_MULTIPLY  &kp C_BRI_DEC  &kp C_BRI_INC  &kp KP_DOT              &mt LGUI(N0) N0         &mt LGUI(N1) N1  &mt LGUI(N2) N2  &mt LGUI(N3) N3     &trans
                                                  &to 0          &sk LEFT_GUI            &kp RIGHT_ALT           &trans
            >;
        };

        layer_Navigate {
            bindings = <
         &mt LA(F4) ESC         &mwh SCROLL_LEFT &mmv MOVE_UP   &mwh SCROLL_RIGHT &mt Q H             &kp LA(LEFT_ARROW)              &kp RC(LS(TAB))                  &mt RGUI(UP_ARROW) UP_ARROW  &kp LC(TAB)                        &kp LA(RIGHT_ARROW)
         &mt TAB LA(TAB)        &mmv MOVE_LEFT   &mmv MOVE_DOWN &mmv MOVE_RIGHT   &kp LGUI            &mt RGUI(LEFT_ARROW) LEFT_ARROW &mt RGUI(DOWN_ARROW) DOWN_ARROW  &mt RGUI(UP_ARROW) UP_ARROW  &mt RGUI(RIGHT_ARROW) RIGHT_ARROW  &kp ENTER 
         &kp LC(LG(LEFT_ARROW)) &kp DEL         &mwh SCROLL_UP  &mwh SCROLL_DOWN  &mkp LCLK           &mkp RCLK                       &kp PAGE_UP                      &kp PAGE_DOWN                &trans                             &kp LC(LG(RIGHT_ARROW))
                                                                &to 0             &trans              &kp RA                          &to 1
            >;
        };

        layer_Keyboard_Function {
            bindings = <
         &trans  &trans  &bt BT_NXT  &trans        &reset              &trans  &kp F9  &kp F10  &kp F11  &kp F12
         &trans  &trans  &bt BT_CLR  &out OUT_TOG  &trans              &trans  &kp F5  &kp F6   &kp F7   &kp F8
         &trans  &trans  &bt BT_PRV  &trans        &trans              &trans  &kp F1  &kp F2   &kp F3   &kp F4
                                     &trans        &trans              &trans  &trans
            >;
        };

        layer_QWERTY {
            bindings = <
         &kp Q &kp W &kp E &kp R      &kp T             &kp Y          &kp U  &kp I       &kp O    &kp P
         &kp A &kp S &kp D &kp F      &kp G             &kp H          &kp J  &kp K       &kp L    &kp 
         &kp Z &kp X &kp C &kp V      &kp B             &kp N          &kp M  &kp COMMA   &kp DOT  &kp MINUS
                           &kp SPACE  &sk RALT          &kp BACKSPACE  &to 0
            >;
        };

    };
};



